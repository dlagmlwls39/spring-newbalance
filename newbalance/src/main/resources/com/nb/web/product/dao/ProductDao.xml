<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nb.web.product.dao.ProductDao">
	
	<!-- 상품 정보 -->
	<!-- public ProductDTO selectProduct(String pdCode) -->
	<select id="selectProduct" resultType="com.nb.web.product.dto.ProductDTO" parameterType="string">
		SELECT pd_code pdCode, category_code categoryCode, pd_name pdName, pd_price pdPrice, pd_memberonly pdMemberonly
				, pd_mincount pdMincount, pd_country pdCountry, pd_from pdFrom, pd_date pdDate, pd_material pdMaterial
				, pd_feet pdFeet, pd_release pdRelease, pd_feature pdFeature, img_url imgUrl
		FROM ( 
				SELECT p.pd_code, category_code, pd_name, pd_price, pd_memberonly, pd_mincount 
						, pd_country, pd_from, pd_date, pd_material, pd_feet, pd_release, pd_feature 
						, ROW_NUMBER() OVER(PARTITION BY p.pd_code ORDER BY img_seq ASC) seq, img_url 
				FROM product p join product_detail d on p.pd_code = d.pd_code 
			     		  				join product_image i on p.pd_code = i.pd_code
		)t 
		WHERE seq = 1 and pd_code = #{ pdCode }
	</select>

	<!-- 상품 이미지 리스트 -->
	<!-- ArrayList<ProductImageDTO> selectImage(String pdCode) -->
	<select id="selectImage" resultType="com.nb.web.product.dto.ProductImageDTO">
		SELECT img_url imgUrl
		FROM product_image 
		WHERE pd_code = #{ pdCode }
		ORDER BY img_seq
	</select>
	
	<!-- 상품 사이즈 리스트 -->
	<!-- public ArrayList<ProductSizeDTO> selectSize(String pdCode) -->
	<select id="selectSize" resultType="com.nb.web.product.dto.ProductSizeDTO">
		SELECT s.size_code sizeCode, stock_count stockCount, sz 
		FROM product p join product_stock s on p.pd_code = s.pd_code
					  			join size_list l on s.size_code = l.size_code 
		WHERE p.pd_code = #{ pdCode }
	</select>

	<!-- 연관상품 리스트 -->
	<!-- ArrayList<ProductDTO> selectRelatedProduct(String pdCode) -->
	<select id="selectRelatedProduct" resultType="com.nb.web.product.dto.ProductDTO">
		SELECT pd_code pdCode, pd_name pdName, pd_price pdPrice, img_url imgUrl 
		FROM ( 
				SELECT p.pd_code, pd_name, pd_price 
				       , ROW_NUMBER() OVER(PARTITION BY p.pd_code ORDER BY img_seq ASC) seq, img_url 
				FROM product p join product_detail d on p.pd_code = d.pd_code 
				                        join product_image i on p.pd_code = i.pd_code 
		)t
		<![CDATA[  
		WHERE seq = 1 and ROWNUM <= 4 and substr(pd_code, 1, 4) = substr(#{ pdCode }, 1, 4)
		]]>
	</select>
	
	<!-- 다른 컬러 리스트 -->
	<!-- ArrayList<ProductColorDTO> diffColorProduct(String pdCode) -->
	<select id="diffColorProduct" resultType="com.nb.web.product.dto.ProductColorDTO">
		SELECT pd_code pdCode, img_url imgUrl, trim(TO_CHAR(color_code, '09')) colorCode, color, pd_name pdName, pd_price pdPrice 
		FROM ( 
				SELECT p.pd_code, c.color_code, color, pd_name, pd_price 
				        , ROW_NUMBER() OVER(PARTITION BY p.pd_code ORDER BY img_seq ASC) seq, img_url  
			 	FROM product p join product_image i on p.pd_code = i.pd_code 
				                  		join color c on i.color_code = c.color_code 
		)t 
		WHERE seq = 1 and substr(pd_code, 1, 8) = substr(#{ pdCode }, 1, 8)
	</select>
	
	<!-- 현재 상품의 컬러 정보 -->
	<!-- ProductColorDTO getPdColor(String pdCode) throws SQLException; -->
	<select id="getPdColor" resultType="com.nb.web.product.dto.ProductColorDTO">
		SELECT DISTINCT(TRIM(TO_CHAR(c.color_code, '09'))) colorCode, color, p.pd_code pdCode
		FROM product p join product_image i on p.pd_code = i.pd_code 
		                        join color c on i.color_code = c.color_code 
		WHERE p.pd_code = #{ pdCode }
	</select>
	
	<!-- 상품별 리뷰 리스트 -->
	<!-- ArrayList<ReviewDTO> review(String pdCode) throws SQLException; -->
	<!-- <select id="review" resultType="com.nb.web.product.dto.ReviewDTO">
		SELECT rev_seq revSeq, user_code userCode, ord_code ordCode, sz "size", color, rev_date revDate
			, rev_content revContent, rev_good revGood, rev_bad revBad, rev_starscore revStarScore 
		FROM review  
		WHERE pd_code = #{ pdCode }
	</select> -->
	
		<!-- 상품별 리뷰 리스트 -->
	<!-- ArrayList<ReviewDTO> review(String pdCode) throws SQLException; -->
	<select id="review" resultType="com.nb.web.product.dto.ReviewDTO">
		SELECT rev_seq revSeq, r.user_code userCode, ord_code ordCode, sz "size", color, rev_date revDate
			, rev_content revContent, rev_good revGood, rev_bad revBad, rev_starscore revStarScore
			, RPAD(SUBSTR(user_name, 0, 1), 6, '****') userName, UPPER(lv) "level"
		FROM review r join user_info u on r.user_code = u.user_code
		WHERE pd_code = #{ pdCode }
	</select>
	
	<!-- 리뷰별 이미지 리스트 -->
	<!-- ArrayList<ReviewImgDTO> reviewImg(String pdCode) throws SQLException; -->
	<select id="reviewImg" resultType="com.nb.web.product.dto.ReviewImgDTO">
		SELECT r.rev_seq revSeq, rev_img revImg
		FROM review r join review_image i on r.rev_seq = i.rev_seq 
		WHERE r.rev_seq = #{ revSeq }
	</select>
	
	<!-- 리뷰 집계(개수, 별점 평균) -->
	<!-- ReviewDTO totalReview(String pdCode) throws SQLException; -->
	<select id="totalReview" resultType="com.nb.web.product.dto.ReviewDTO">
		SELECT COUNT(*) count, AVG(rev_starscore) avg 
		FROM review 
		WHERE pd_code = #{ pdCode }
	</select>
	
	<!-- 상품별 문의 리스트 -->
	<!-- ArrayList<ProductQnaDTO> selectProductQna(String pdCode) throws SQLException; -->
	<select id="selectProductQna" resultType="com.nb.web.product.dto.ProductQnaDTO">
		SELECT RPAD(SUBSTR(user_id, 0, 4), LENGTH(SUBSTR(user_id, 4)) + 3, '*') userId, q.user_code userCode
				, TO_CHAR(qna_writedate, 'YYYY-MM-DD') qnaWritedate, qna_status qnaStatus, qna_title qnaTitle, qna_content qnaContent, qna_file qnaFile, qna_private qnaPrivate, qna_reply qnaReply 
		FROM qna q JOIN user_info u ON q.user_code = u.user_code 
		WHERE pd_code = #{ pdCode } and qt_seq = 3 
		ORDER BY qna_writedate DESC
	</select>
	
	<!-- 재입고 알림 상품 카운트(특정 회원이 특정 상품 알림 신청했는지 여부) -->
	<!-- int alarmCount(RestockAlarmDTO dto) throws SQLException; -->
	<select id="alarmCount" resultType="Integer">
		SELECT count(*) count 
		FROM restock_pd 
		WHERE user_code = #{ userCode } and pd_code = #{ pdCode } and sz = #{ size }
	</select>
	
	<!-- 재입고알림 상품 추가 -->
	<!-- int applyAlarm(RestockAlarmDTO dto) throws SQLException; -->
	<insert id="applyAlarm">
		INSERT INTO restock_pd VALUES (rs_code.nextval, '알림대기', SYSDATE, null, #{ userCode }, #{ pdCode }, #{ color }, #{ size })
	</insert>
	
	
	
</mapper>

